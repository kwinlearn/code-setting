{"version":3,"sources":["vs/vs/loader.js","vs/vs/css.js","vs/vs/nls.js"],"names":["_amdLoaderGlobal","this","define","AMDLoader","_isWindows","navigator","userAgent","indexOf","process","platform","getHighPerformanceTimestamp","hasPerformanceNow","global","performance","now","Date","initVars","isWebWorker","importScripts","isElectronRenderer","versions","type","isElectronMain","isNode","module","exports","scriptLoader","OnlyOnceScriptLoader","WorkerScriptLoader","NodeScriptLoader","BrowserScriptLoader","moduleManager","ModuleManager","setModuleManager","initConsole","console","log","warn","error","initMainScript","window","onload","i","len","main","scripts","document","getElementsByTagName","length","getAttribute","defineModule","Utilities","generateAnonymousModule","ModuleIdResolver","Configuration","init","_nodeRequire","require","nodeRequire","what","getRecorder","record","LoaderEventType","NodeBeginNativeRequire","r","NodeEndNativeRequire","RequireFunc","DefineFunc","apply","arguments","config","__$__nodeRequire","isWindows","fileUriToFilePath","uri","decodeURI","test","substr","startsWith","haystack","needle","endsWith","containsQueryString","url","isAbsolutePath","forEachProperty","obj","callback","key","hasOwnProperty","isEmpty","isArray","Array","Object","prototype","toString","call","recursiveClone","result","value","NEXT_ANONYMOUS_ID","isAnonymousModule","id","ConfigurationOptionsUtil","validateConfigurationOptions","options","defaultOnError","err","errorCode","moduleId","detail","stack","neededBy","baseUrl","isBuild","paths","bundles","shim","catchError","urlArgs","onError","ignoreDuplicateModules","nodeModules","mergeConfigurationOptions","overwrite","base","concat","bundleConfiguration","location","modules","push","key2","value2","_createIgnoreDuplicateModulesMap","_createSortedPathsRules","_createShimModules","_createOverwriteModuleIdToPath","filename","nodeMain","dirnameIndex","Math","max","lastIndexOf","substring","overwriteModuleIdToPath","bundle","j","ignoreDuplicateModulesMap","_this","sortedPathsRules","from","to","sort","a","b","_ensureShimModule1","path","shimMD","dependencyId","shimModules","dependencies","shimModulesStr","_ensureShimModule2","deps","depsValues","_i","initReturnValue","pieces","split","JSON","stringify","cloneAndMerge","getOptionsLiteral","_applyPaths","pathRule","lenJ","_addUrlArgsToUrl","_addUrlArgsIfNecessaryToUrl","_addUrlArgsIfNecessaryToUrls","urls","moduleIdToPaths","results","requireToUrl","isShimmed","getShimmedModuleDefine","getShimmedModulesStr","isDuplicateMessageIgnoredFor","getConfigForModule","shouldCatchError","shouldRecordStats","recordStats","fromModuleId","_config","lastSlash","fromModulePath","_normalizeModuleId","pattern","replace","resolveModule","Module","errorback","recorder","moduleIdResolver","defineCallStack","_id","_dependencies","_dependenciesValues","_callback","_errorback","_recorder","_moduleIdResolver","_exports","_exportsPassedIn","_defineCallStack","_digestDependencies","_unresolvedDependenciesCount","_complete","_normalizedDependencies","_managerDependencies","_managerDependenciesMap","d","addManagerDependency","bangIndex","pluginId","pluginParam","dependency","index","Error","renameDependency","oldDependencyId","newDependencyId","getId","getModuleIdResolver","isExportsPassedIn","getExports","getDependencies","getNormalizedDependencies","getDefineCallStack","_invokeFactory","returnedValue","producedError","e","BeginInvokeFactory","EndInvokeFactory","cleanUp","onDependencyError","resolveDependency","isComplete","LoaderEvent","timestamp","LoaderEventRecorder","loaderAvailableTimestamp","_events","LoaderAvailable","getEvents","NullLoaderEventRecorder","INSTANCE","_scriptLoader","_modules","_knownModules","_inverseDependencies","_inversePluginDependencies","_queuedDefineCalls","_loadingScriptsCount","_resolvedScriptPaths","_checksums","_findRelevantLocationInStack","normalize","str","normalizedPath","stackPieces","m","match","stackPath","stackLine","stackColumn","trimPathOffset","line","parseInt","col","getBuildInfo","keys","map","defineStack","defineLocation","getLoaderEvents","recordChecksum","scriptSrc","checksum","getChecksums","enqueueDefineModule","enqueueDefineAnonymousModule","moduleConfig","_resolve","_relativeRequire","synchronousRequire","plugin","_arg","configure","params","shouldOverwrite","oldShouldRecordStats","getConfigurationOptions","_onLoad","defineCall","_onLoadError","shift","queueElement","slice","seenModuleId","someoneNotified","queue","_onModuleComplete","inverseDependencyId","inverseDependency","inverseDependencies","inversePluginDependencies","inversePluginDependencyId","inversePluginDependency","_resolvePluginDependencySync","_hasDependencyPath","element","inQueue","_findCyclePath","depth","_createRequire","toUrl","getStats","dynamic","load","_resolveDependency","_resolvePluginDependencyAsync","_loadModule","_resolvePluginDependency","_resolveShimmedDependency","loadCallback","defineInfo","cyclePath","reverse","join","dependencyValue","anyModuleIdResolver","lastPathIndex","loadNextPath","currentPath","BeginLoadingScript","EndLoadingScriptOK","EndLoadingScriptError","actualScriptLoader","callbackMap","scriptCallbacks","triggerCallback","triggerErrorback","attachListenersV1","script","unbind","detachEvent","loadEventListener","addEventListener","removeEventListener","errorEventListener","readyState","attachEvent","attachListenersV2","createElement","setAttribute","appendChild","loadCalls","loadTimeout","_load","setTimeout","errorOccured","_initialized","_moduleManager","_init","_fs","_vm","_path","_crypto","opts","nodeInstrumenter","c","moduleExports","readFile","encoding","data","hash","createHash","update","digest","NodeBeginEvaluatingScript","vmScriptSrc","driveLetterMatch","toUpperCase","contents","prefix","suffix","charCodeAt","_BOM","version","runInThisContext","dirname","NodeEndEvaluatingScript","amd","jQuery","getConfig","reset","__extends","__","constructor","p","create","_cssPluginGlobal","CSSLoaderPlugin","BrowserCSSLoader","_pendingLoads","attachListeners","name","linkNode","_insertLinkNode","head","other","insertBefore","createLinkTag","cssUrl","externalCallback","externalErrorback","_linkTagExists","nameAttr","hrefAttr","links","IE9CSSLoader","_super","_blockedLoads","_mergeStyleSheetsTimeout","_styleSheetCount","_handleBlocked","linkCount","styleCount","blockedLoadsCount","_mergeStyleSheets","_mergeStyleSheet","dstPath","dst","srcPath","src","rules","insertRule","rewriteUrls","cssText","_asIE9HTMLLinkElement","linkElement","linkDomNodes","linkDomNodesCount","mergeCandidates","rulesLength","styleSheet","mergeCandidatesCount","mergeCount","min","floor","srcIndex","dstIndex","href","parentNode","removeChild","styleSheetCount","IE8CSSLoader","NodeCSSLoader","fs","readFileSync","BOM_CHAR_CODE","CSSPlugin","cssLoader","req","myConfig","inlineResources","BUILD_MAP","BUILD_PATH_MAP","write","pluginName","moduleName","entryPoint","getEntryPoint","cssPluginEntryPoints","fsPath","asModule","writeFile","fileName","entries","rewriteOrInlineUrls","getInlinedResources","cssInlinedResources","pathOf","joinPaths","findSlashIndexAfterPrefix","pushPiece","piece","prevPiece","pop","slashIndex","aPathStartIndex","charAt","commonPrefix","str1","str2","commonFolderPrefix","fromPath","toPath","relativePath","upCount","_replaceURL","replacer","_","matches","originalFile","newFile","absoluteUrl","originalFileFSPath","forceBase64","fileContents","normalizedFSPath","MIME","DATA","newText","encodedData","isElectron","node","_nlsPluginGlobal","NLSLoaderPlugin","_format","message","args","rest","IS_PSEUDO","findLanguageForModule","localize","createScopedLocalize","scope","idx","defaultValue","restArgs","Resources","Plugin","undefined","DEFAULT_TAG","NLSPlugin","setPseudoTranslation","getString","keyMap","moduleKey","mk","subKey","messages","BUILD_MAP_KEYS","pluginConfig","language","availableLanguages","_getEntryPointsMap","nlsPluginEntryPoints","entryPointsMap","finishBuild"],"mappings":"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","file":"loader.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n// Limitation: To load jquery through the loader, always require 'jquery' and add a path for it in the loader configuration\nvar _amdLoaderGlobal = this, define;\nvar AMDLoader;\n(function (AMDLoader) {\n    // ------------------------------------------------------------------------\n    // Utilities\n    function _isWindows() {\n        if (typeof navigator !== 'undefined') {\n            if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\n                return true;\n            }\n        }\n        if (typeof process !== 'undefined') {\n            return (process.platform === 'win32');\n        }\n        return false;\n    }\n    var isWindows = _isWindows();\n    var Utilities = (function () {\n        function Utilities() {\n        }\n        /**\n         * This method does not take care of / vs \\\n         */\n        Utilities.fileUriToFilePath = function (uri) {\n            uri = decodeURI(uri);\n            if (isWindows) {\n                if (/^file:\\/\\/\\//.test(uri)) {\n                    // This is a URI without a hostname => return only the path segment\n                    return uri.substr(8);\n                }\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(5);\n                }\n            }\n            else {\n                if (/^file:\\/\\//.test(uri)) {\n                    return uri.substr(7);\n                }\n            }\n            // Not sure...\n            return uri;\n        };\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        Utilities.endsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\n        };\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\n        Utilities.containsQueryString = function (url) {\n            return /^[^\\#]*\\?/gi.test(url);\n        };\n        /**\n         * Does `url` start with http:// or https:// or / ?\n         */\n        Utilities.isAbsolutePath = function (url) {\n            return (Utilities.startsWith(url, 'http://')\n                || Utilities.startsWith(url, 'https://')\n                || Utilities.startsWith(url, 'file://')\n                || Utilities.startsWith(url, '/'));\n        };\n        Utilities.forEachProperty = function (obj, callback) {\n            if (obj) {\n                var key;\n                for (key in obj) {\n                    if (obj.hasOwnProperty(key)) {\n                        callback(key, obj[key]);\n                    }\n                }\n            }\n        };\n        Utilities.isEmpty = function (obj) {\n            var isEmpty = true;\n            Utilities.forEachProperty(obj, function () {\n                isEmpty = false;\n            });\n            return isEmpty;\n        };\n        Utilities.isArray = function (obj) {\n            if (Array.isArray) {\n                return Array.isArray(obj);\n            }\n            return Object.prototype.toString.call(obj) === '[object Array]';\n        };\n        Utilities.recursiveClone = function (obj) {\n            if (!obj || typeof obj !== 'object') {\n                return obj;\n            }\n            var result = Utilities.isArray(obj) ? [] : {};\n            Utilities.forEachProperty(obj, function (key, value) {\n                if (value && typeof value === 'object') {\n                    result[key] = Utilities.recursiveClone(value);\n                }\n                else {\n                    result[key] = value;\n                }\n            });\n            return result;\n        };\n        Utilities.generateAnonymousModule = function () {\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\n        };\n        Utilities.isAnonymousModule = function (id) {\n            return id.indexOf('===anonymous') === 0;\n        };\n        Utilities.NEXT_ANONYMOUS_ID = 1;\n        return Utilities;\n    }());\n    AMDLoader.Utilities = Utilities;\n    var ConfigurationOptionsUtil = (function () {\n        function ConfigurationOptionsUtil() {\n        }\n        /**\n         * Ensure configuration options make sense\n         */\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (options) {\n            function defaultOnError(err) {\n                if (err.errorCode === 'load') {\n                    console.error('Loading \"' + err.moduleId + '\" failed');\n                    console.error('Detail: ', err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    console.error('Here are the modules that depend on it:');\n                    console.error(err.neededBy);\n                    return;\n                }\n                if (err.errorCode === 'factory') {\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\n                    console.error(err.detail);\n                    if (err.detail && err.detail.stack) {\n                        console.error(err.detail.stack);\n                    }\n                    return;\n                }\n            }\n            options = options || {};\n            if (typeof options.baseUrl !== 'string') {\n                options.baseUrl = '';\n            }\n            if (typeof options.isBuild !== 'boolean') {\n                options.isBuild = false;\n            }\n            if (typeof options.paths !== 'object') {\n                options.paths = {};\n            }\n            if (typeof options.bundles !== 'object') {\n                options.bundles = [];\n            }\n            if (typeof options.shim !== 'object') {\n                options.shim = {};\n            }\n            if (typeof options.config !== 'object') {\n                options.config = {};\n            }\n            if (typeof options.catchError === 'undefined') {\n                // Catch errors by default in web workers, do not catch errors by default in other contexts\n                options.catchError = isWebWorker;\n            }\n            if (typeof options.urlArgs !== 'string') {\n                options.urlArgs = '';\n            }\n            if (typeof options.onError !== 'function') {\n                options.onError = defaultOnError;\n            }\n            if (typeof options.ignoreDuplicateModules !== 'object' || !Utilities.isArray(options.ignoreDuplicateModules)) {\n                options.ignoreDuplicateModules = [];\n            }\n            if (options.baseUrl.length > 0) {\n                if (!Utilities.endsWith(options.baseUrl, '/')) {\n                    options.baseUrl += '/';\n                }\n            }\n            if (!Array.isArray(options.nodeModules)) {\n                options.nodeModules = [];\n            }\n            return options;\n        };\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (overwrite, base) {\n            if (overwrite === void 0) { overwrite = null; }\n            if (base === void 0) { base = null; }\n            var result = Utilities.recursiveClone(base || {});\n            // Merge known properties and overwrite the unknown ones\n            Utilities.forEachProperty(overwrite, function (key, value) {\n                if (key === 'bundles' && typeof result.bundles !== 'undefined') {\n                    if (Utilities.isArray(value)) {\n                        // Compatibility style\n                        result.bundles = result.bundles.concat(value);\n                    }\n                    else {\n                        // AMD API style\n                        Utilities.forEachProperty(value, function (key, value) {\n                            var bundleConfiguration = {\n                                location: key,\n                                modules: value\n                            };\n                            result.bundles.push(bundleConfiguration);\n                        });\n                    }\n                }\n                else if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\n                }\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\n                    Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\n                }\n                else if (key === 'shim' && typeof result.shim !== 'undefined') {\n                    Utilities.forEachProperty(value, function (key2, value2) { return result.shim[key2] = value2; });\n                }\n                else if (key === 'config' && typeof result.config !== 'undefined') {\n                    Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\n                }\n                else {\n                    result[key] = Utilities.recursiveClone(value);\n                }\n            });\n            return ConfigurationOptionsUtil.validateConfigurationOptions(result);\n        };\n        return ConfigurationOptionsUtil;\n    }());\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\n    var Configuration = (function () {\n        function Configuration(options) {\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(options);\n            this._createIgnoreDuplicateModulesMap();\n            this._createSortedPathsRules();\n            this._createShimModules();\n            this._createOverwriteModuleIdToPath();\n            if (this.options.baseUrl === '') {\n                if (isNode && this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename) {\n                    var nodeMain = this.options.nodeRequire.main.filename;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n                if (isNode && this.options.nodeMain) {\n                    var nodeMain = this.options.nodeMain;\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\n                }\n            }\n        }\n        Configuration.prototype._createOverwriteModuleIdToPath = function () {\n            this.overwriteModuleIdToPath = {};\n            for (var i = 0; i < this.options.bundles.length; i++) {\n                var bundle = this.options.bundles[i];\n                var location = bundle.location;\n                if (bundle.modules) {\n                    for (var j = 0; j < bundle.modules.length; j++) {\n                        this.overwriteModuleIdToPath[bundle.modules[j]] = location;\n                    }\n                }\n            }\n        };\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\n            // Build a map out of the ignoreDuplicateModules array\n            this.ignoreDuplicateModulesMap = {};\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\n            }\n        };\n        Configuration.prototype._createSortedPathsRules = function () {\n            var _this = this;\n            // Create an array our of the paths rules, sorted descending by length to\n            // result in a more specific -> less specific order\n            this.sortedPathsRules = [];\n            Utilities.forEachProperty(this.options.paths, function (from, to) {\n                if (!Utilities.isArray(to)) {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: [to]\n                    });\n                }\n                else {\n                    _this.sortedPathsRules.push({\n                        from: from,\n                        to: to\n                    });\n                }\n            });\n            this.sortedPathsRules.sort(function (a, b) {\n                return b.from.length - a.from.length;\n            });\n        };\n        Configuration.prototype._ensureShimModule1 = function (path, shimMD) {\n            // Ensure dependencies are also shimmed\n            for (var i = 0; i < shimMD.length; i++) {\n                var dependencyId = shimMD[i];\n                if (!this.shimModules.hasOwnProperty(dependencyId)) {\n                    this._ensureShimModule1(dependencyId, []);\n                }\n            }\n            this.shimModules[path] = {\n                stack: null,\n                dependencies: shimMD,\n                callback: null\n            };\n            if (this.options.isBuild) {\n                this.shimModulesStr[path] = 'null';\n            }\n        };\n        Configuration.prototype._ensureShimModule2 = function (path, shimMD) {\n            this.shimModules[path] = {\n                stack: null,\n                dependencies: shimMD.deps || [],\n                callback: function () {\n                    var depsValues = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        depsValues[_i - 0] = arguments[_i];\n                    }\n                    if (typeof shimMD.init === 'function') {\n                        var initReturnValue = shimMD.init.apply(global, depsValues);\n                        if (typeof initReturnValue !== 'undefined') {\n                            return initReturnValue;\n                        }\n                    }\n                    if (typeof shimMD.exports === 'function') {\n                        return shimMD.exports.apply(global, depsValues);\n                    }\n                    if (typeof shimMD.exports === 'string') {\n                        var pieces = shimMD.exports.split('.');\n                        var obj = global;\n                        for (var i = 0; i < pieces.length; i++) {\n                            if (obj) {\n                                obj = obj[pieces[i]];\n                            }\n                        }\n                        return obj;\n                    }\n                    return shimMD.exports || {};\n                }\n            };\n            if (this.options.isBuild) {\n                if (typeof shimMD.init === 'function') {\n                    this.shimModulesStr[path] = shimMD.init.toString();\n                }\n                else if (typeof shimMD.exports === 'function') {\n                    this.shimModulesStr[path] = shimMD.exports.toString();\n                }\n                else if (typeof shimMD.exports === 'string') {\n                    this.shimModulesStr[path] = 'function() { return this.' + shimMD.exports + '; }';\n                }\n                else {\n                    this.shimModulesStr[path] = JSON.stringify(shimMD.exports);\n                }\n            }\n        };\n        Configuration.prototype._createShimModules = function () {\n            var _this = this;\n            this.shimModules = {};\n            this.shimModulesStr = {};\n            Utilities.forEachProperty(this.options.shim, function (path, shimMD) {\n                if (!shimMD) {\n                    return;\n                }\n                if (Utilities.isArray(shimMD)) {\n                    _this._ensureShimModule1(path, shimMD);\n                    return;\n                }\n                _this._ensureShimModule2(path, shimMD);\n            });\n        };\n        /**\n         * Clone current configuration and overwrite options selectively.\n         * @param options The selective options to overwrite with.\n         * @result A new configuration\n         */\n        Configuration.prototype.cloneAndMerge = function (options) {\n            return new Configuration(ConfigurationOptionsUtil.mergeConfigurationOptions(options, this.options));\n        };\n        /**\n         * Get current options bag. Useful for passing it forward to plugins.\n         */\n        Configuration.prototype.getOptionsLiteral = function () {\n            return this.options;\n        };\n        Configuration.prototype._applyPaths = function (moduleId) {\n            var pathRule;\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\n                pathRule = this.sortedPathsRules[i];\n                if (Utilities.startsWith(moduleId, pathRule.from)) {\n                    var result = [];\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\n                    }\n                    return result;\n                }\n            }\n            return [moduleId];\n        };\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\n            if (Utilities.containsQueryString(url)) {\n                return url + '&' + this.options.urlArgs;\n            }\n            else {\n                return url + '?' + this.options.urlArgs;\n            }\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\n            if (this.options.urlArgs) {\n                return this._addUrlArgsToUrl(url);\n            }\n            return url;\n        };\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\n            if (this.options.urlArgs) {\n                for (var i = 0, len = urls.length; i < len; i++) {\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\n                }\n            }\n            return urls;\n        };\n        /**\n         * Transform a module id to a location. Appends .js to module ids\n         */\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\n            if (this.isBuild() && this.options.nodeModules.indexOf(moduleId) >= 0) {\n                // This is a node module and we are at build time, drop it\n                return ['empty:'];\n            }\n            var result = moduleId;\n            if (this.overwriteModuleIdToPath.hasOwnProperty(result)) {\n                result = this.overwriteModuleIdToPath[result];\n            }\n            var results;\n            if (!Utilities.endsWith(result, '.js') && !Utilities.isAbsolutePath(result)) {\n                results = this._applyPaths(result);\n                for (var i = 0, len = results.length; i < len; i++) {\n                    if (this.isBuild() && results[i] === 'empty:') {\n                        continue;\n                    }\n                    if (!Utilities.isAbsolutePath(results[i])) {\n                        results[i] = this.options.baseUrl + results[i];\n                    }\n                    if (!Utilities.endsWith(results[i], '.js') && !Utilities.containsQueryString(results[i])) {\n                        results[i] = results[i] + '.js';\n                    }\n                }\n            }\n            else {\n                if (!Utilities.endsWith(result, '.js') && !Utilities.containsQueryString(result)) {\n                    result = result + '.js';\n                }\n                results = [result];\n            }\n            return this._addUrlArgsIfNecessaryToUrls(results);\n        };\n        /**\n         * Transform a module id or url to a location.\n         */\n        Configuration.prototype.requireToUrl = function (url) {\n            var result = url;\n            if (!Utilities.isAbsolutePath(result)) {\n                result = this._applyPaths(result)[0];\n                if (!Utilities.isAbsolutePath(result)) {\n                    result = this.options.baseUrl + result;\n                }\n            }\n            return this._addUrlArgsIfNecessaryToUrl(result);\n        };\n        /**\n         * Test if `moduleId` is shimmed.\n         */\n        Configuration.prototype.isShimmed = function (moduleId) {\n            return this.shimModules.hasOwnProperty(moduleId);\n        };\n        /**\n         * Flag to indicate if current execution is as part of a build.\n         */\n        Configuration.prototype.isBuild = function () {\n            return this.options.isBuild;\n        };\n        /**\n         * Get a normalized shim definition for `moduleId`.\n         */\n        Configuration.prototype.getShimmedModuleDefine = function (moduleId) {\n            return this.shimModules[moduleId];\n        };\n        Configuration.prototype.getShimmedModulesStr = function (moduleId) {\n            return this.shimModulesStr[moduleId];\n        };\n        /**\n         * Test if module `moduleId` is expected to be defined multiple times\n         */\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\n        };\n        /**\n         * Get the configuration settings for the provided module id\n         */\n        Configuration.prototype.getConfigForModule = function (moduleId) {\n            if (this.options.config) {\n                return this.options.config[moduleId];\n            }\n        };\n        /**\n         * Should errors be caught when executing module factories?\n         */\n        Configuration.prototype.shouldCatchError = function () {\n            return this.options.catchError;\n        };\n        /**\n         * Should statistics be recorded?\n         */\n        Configuration.prototype.shouldRecordStats = function () {\n            return this.options.recordStats;\n        };\n        /**\n         * Forward an error to the error handler.\n         */\n        Configuration.prototype.onError = function (err) {\n            this.options.onError(err);\n        };\n        return Configuration;\n    }());\n    AMDLoader.Configuration = Configuration;\n    // ------------------------------------------------------------------------\n    // ModuleIdResolver\n    var ModuleIdResolver = (function () {\n        function ModuleIdResolver(config, fromModuleId) {\n            this._config = config;\n            var lastSlash = fromModuleId.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\n            }\n            else {\n                this.fromModulePath = '';\n            }\n        }\n        ModuleIdResolver.prototype.isBuild = function () {\n            return this._config.isBuild();\n        };\n        /**\n         * Normalize 'a/../name' to 'name', etc.\n         */\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\n            var r = moduleId, pattern;\n            // replace /./ => /\n            pattern = /\\/\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^./ => nothing\n            r = r.replace(/^\\.\\//g, '');\n            // replace /aa/../ => / (BUT IGNORE /../../)\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n            while (pattern.test(r)) {\n                r = r.replace(pattern, '/');\n            }\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n            return r;\n        };\n        /**\n         * Resolve relative module ids\n         */\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\n            var result = moduleId;\n            if (!Utilities.isAbsolutePath(result)) {\n                if (Utilities.startsWith(result, './') || Utilities.startsWith(result, '../')) {\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\n                }\n            }\n            return result;\n        };\n        /**\n         * Transform a module id to a location. Appends .js to module ids\n         */\n        ModuleIdResolver.prototype.moduleIdToPaths = function (moduleId) {\n            var r = this._config.moduleIdToPaths(moduleId);\n            if (isNode && moduleId.indexOf('/') === -1) {\n                r.push('node|' + this.fromModulePath + '|' + moduleId);\n            }\n            return r;\n        };\n        /**\n         * Transform a module id or url to a location.\n         */\n        ModuleIdResolver.prototype.requireToUrl = function (url) {\n            return this._config.requireToUrl(url);\n        };\n        /**\n         * Should errors be caught when executing module factories?\n         */\n        ModuleIdResolver.prototype.shouldCatchError = function () {\n            return this._config.shouldCatchError();\n        };\n        /**\n         * Forward an error to the error handler.\n         */\n        ModuleIdResolver.prototype.onError = function (err) {\n            this._config.onError(err);\n        };\n        return ModuleIdResolver;\n    }());\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\n    // ------------------------------------------------------------------------\n    // Module\n    var Module = (function () {\n        function Module(id, dependencies, callback, errorback, recorder, moduleIdResolver, config, defineCallStack) {\n            if (defineCallStack === void 0) { defineCallStack = null; }\n            this._id = id;\n            this._dependencies = dependencies;\n            this._dependenciesValues = [];\n            this._callback = callback;\n            this._errorback = errorback;\n            this._recorder = recorder;\n            this._moduleIdResolver = moduleIdResolver;\n            this._exports = {};\n            this._exportsPassedIn = false;\n            this._config = config;\n            this._defineCallStack = defineCallStack;\n            this._digestDependencies();\n            if (this._unresolvedDependenciesCount === 0) {\n                this._complete();\n            }\n        }\n        Module.prototype._digestDependencies = function () {\n            var _this = this;\n            // Exact count of dependencies\n            this._unresolvedDependenciesCount = this._dependencies.length;\n            // Send on to the manager only a subset of dependencies\n            // For example, 'exports' and 'module' can be fulfilled locally\n            this._normalizedDependencies = [];\n            this._managerDependencies = [];\n            this._managerDependenciesMap = {};\n            var i, len, d;\n            for (i = 0, len = this._dependencies.length; i < len; i++) {\n                d = this._dependencies[i];\n                if (!d) {\n                    // Most likely, undefined sneaked in to the dependency array\n                    // Also, IE8 interprets ['a', 'b',] as ['a', 'b', undefined]\n                    console.warn('Please check module ' + this._id + ', the dependency list looks broken');\n                    this._normalizedDependencies[i] = d;\n                    this._dependenciesValues[i] = null;\n                    this._unresolvedDependenciesCount--;\n                    continue;\n                }\n                if (d === 'exports') {\n                    // Fulfill 'exports' locally and remember that it was passed in\n                    // Later on, we will ignore the return value of the factory method\n                    this._exportsPassedIn = true;\n                    this._normalizedDependencies[i] = d;\n                    this._dependenciesValues[i] = this._exports;\n                    this._unresolvedDependenciesCount--;\n                }\n                else if (d === 'module') {\n                    // Fulfill 'module' locally\n                    this._normalizedDependencies[i] = d;\n                    this._dependenciesValues[i] = {\n                        id: this._id,\n                        config: function () { return _this._config; }\n                    };\n                    this._unresolvedDependenciesCount--;\n                }\n                else if (d === 'require') {\n                    // Request 'requre' from the manager\n                    this._normalizedDependencies[i] = d;\n                    this.addManagerDependency(d, i);\n                }\n                else {\n                    // Normalize dependency and then request it from the manager\n                    var bangIndex = d.indexOf('!');\n                    if (bangIndex >= 0) {\n                        var pluginId = d.substring(0, bangIndex);\n                        var pluginParam = d.substring(bangIndex + 1, d.length);\n                        d = this._moduleIdResolver.resolveModule(pluginId) + '!' + pluginParam;\n                    }\n                    else {\n                        d = this._moduleIdResolver.resolveModule(d);\n                    }\n                    this._normalizedDependencies[i] = d;\n                    this.addManagerDependency(d, i);\n                }\n            }\n        };\n        Module.prototype.addManagerDependency = function (dependency, index) {\n            if (this._managerDependenciesMap.hasOwnProperty(dependency)) {\n                throw new Error('Module ' + this._id + ' contains multiple times a dependency to ' + dependency);\n            }\n            this._managerDependencies.push(dependency);\n            this._managerDependenciesMap[dependency] = index;\n        };\n        /**\n         * Called by the module manager because plugin dependencies can not\n         * be normalized statically, the part after '!' can only be normalized\n         * once the plugin has loaded and its normalize logic is plugged in.\n         */\n        Module.prototype.renameDependency = function (oldDependencyId, newDependencyId) {\n            if (!this._managerDependenciesMap.hasOwnProperty(oldDependencyId)) {\n                throw new Error('Loader: Cannot rename an unknown dependency!');\n            }\n            var index = this._managerDependenciesMap[oldDependencyId];\n            delete this._managerDependenciesMap[oldDependencyId];\n            this._managerDependenciesMap[newDependencyId] = index;\n            this._normalizedDependencies[index] = newDependencyId;\n        };\n        /**\n         * Get module's id\n         */\n        Module.prototype.getId = function () {\n            return this._id;\n        };\n        /**\n         * Get the module id resolver associated with this module\n         */\n        Module.prototype.getModuleIdResolver = function () {\n            return this._moduleIdResolver;\n        };\n        Module.prototype.isExportsPassedIn = function () {\n            return this._exportsPassedIn;\n        };\n        Module.prototype.getExports = function () {\n            return this._exports;\n        };\n        /**\n         * Get the initial dependencies (resolved).\n         * Does not account for any renames\n         */\n        Module.prototype.getDependencies = function () {\n            return this._managerDependencies;\n        };\n        Module.prototype.getNormalizedDependencies = function () {\n            return this._normalizedDependencies;\n        };\n        Module.prototype.getDefineCallStack = function () {\n            return this._defineCallStack;\n        };\n        Module.prototype._invokeFactory = function () {\n            if (this._moduleIdResolver.isBuild() && !Utilities.isAnonymousModule(this._id)) {\n                return {\n                    returnedValue: null,\n                    producedError: null\n                };\n            }\n            var producedError = null, returnedValue = null;\n            if (this._moduleIdResolver.shouldCatchError()) {\n                try {\n                    returnedValue = this._callback.apply(global, this._dependenciesValues);\n                }\n                catch (e) {\n                    producedError = e;\n                }\n                finally {\n                }\n            }\n            else {\n                returnedValue = this._callback.apply(global, this._dependenciesValues);\n            }\n            return {\n                returnedValue: returnedValue,\n                producedError: producedError\n            };\n        };\n        Module.prototype._complete = function () {\n            var producedError = null;\n            if (this._callback) {\n                if (typeof this._callback === 'function') {\n                    this._recorder.record(LoaderEventType.BeginInvokeFactory, this._id);\n                    var r = this._invokeFactory();\n                    producedError = r.producedError;\n                    this._recorder.record(LoaderEventType.EndInvokeFactory, this._id);\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this._exportsPassedIn || Utilities.isEmpty(this._exports))) {\n                        this._exports = r.returnedValue;\n                    }\n                }\n                else {\n                    this._exports = this._callback;\n                }\n            }\n            if (producedError) {\n                this.getModuleIdResolver().onError({\n                    errorCode: 'factory',\n                    moduleId: this._id,\n                    detail: producedError\n                });\n            }\n        };\n        /**\n         * Release references used while resolving module\n         */\n        Module.prototype.cleanUp = function () {\n            if (this._moduleIdResolver && !this._moduleIdResolver.isBuild()) {\n                this._normalizedDependencies = null;\n                this._moduleIdResolver = null;\n            }\n            this._dependencies = null;\n            this._dependenciesValues = null;\n            this._callback = null;\n            this._managerDependencies = null;\n            this._managerDependenciesMap = null;\n        };\n        /**\n         * One of the direct dependencies or a transitive dependency has failed to load.\n         */\n        Module.prototype.onDependencyError = function (err) {\n            if (this._errorback) {\n                this._errorback(err);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Resolve a dependency with a value.\n         */\n        Module.prototype.resolveDependency = function (id, value) {\n            if (!this._managerDependenciesMap.hasOwnProperty(id)) {\n                throw new Error('Cannot resolve a dependency I do not have!');\n            }\n            this._dependenciesValues[this._managerDependenciesMap[id]] = value;\n            // Prevent resolving the same dependency twice\n            delete this._managerDependenciesMap[id];\n            this._unresolvedDependenciesCount--;\n            if (this._unresolvedDependenciesCount === 0) {\n                this._complete();\n            }\n        };\n        /**\n         * Is the current module complete?\n         */\n        Module.prototype.isComplete = function () {\n            return this._unresolvedDependenciesCount === 0;\n        };\n        return Module;\n    }());\n    AMDLoader.Module = Module;\n    // ------------------------------------------------------------------------\n    // LoaderEvent\n    (function (LoaderEventType) {\n        LoaderEventType[LoaderEventType[\"LoaderAvailable\"] = 1] = \"LoaderAvailable\";\n        LoaderEventType[LoaderEventType[\"BeginLoadingScript\"] = 10] = \"BeginLoadingScript\";\n        LoaderEventType[LoaderEventType[\"EndLoadingScriptOK\"] = 11] = \"EndLoadingScriptOK\";\n        LoaderEventType[LoaderEventType[\"EndLoadingScriptError\"] = 12] = \"EndLoadingScriptError\";\n        LoaderEventType[LoaderEventType[\"BeginInvokeFactory\"] = 21] = \"BeginInvokeFactory\";\n        LoaderEventType[LoaderEventType[\"EndInvokeFactory\"] = 22] = \"EndInvokeFactory\";\n        LoaderEventType[LoaderEventType[\"NodeBeginEvaluatingScript\"] = 31] = \"NodeBeginEvaluatingScript\";\n        LoaderEventType[LoaderEventType[\"NodeEndEvaluatingScript\"] = 32] = \"NodeEndEvaluatingScript\";\n        LoaderEventType[LoaderEventType[\"NodeBeginNativeRequire\"] = 33] = \"NodeBeginNativeRequire\";\n        LoaderEventType[LoaderEventType[\"NodeEndNativeRequire\"] = 34] = \"NodeEndNativeRequire\";\n    })(AMDLoader.LoaderEventType || (AMDLoader.LoaderEventType = {}));\n    var LoaderEventType = AMDLoader.LoaderEventType;\n    function getHighPerformanceTimestamp() {\n        return (hasPerformanceNow ? global.performance.now() : Date.now());\n    }\n    var LoaderEvent = (function () {\n        function LoaderEvent(type, detail, timestamp) {\n            this.type = type;\n            this.detail = detail;\n            this.timestamp = timestamp;\n        }\n        return LoaderEvent;\n    }());\n    AMDLoader.LoaderEvent = LoaderEvent;\n    var LoaderEventRecorder = (function () {\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\n            this._events = [new LoaderEvent(LoaderEventType.LoaderAvailable, '', loaderAvailableTimestamp)];\n        }\n        LoaderEventRecorder.prototype.record = function (type, detail) {\n            this._events.push(new LoaderEvent(type, detail, getHighPerformanceTimestamp()));\n        };\n        LoaderEventRecorder.prototype.getEvents = function () {\n            return this._events;\n        };\n        return LoaderEventRecorder;\n    }());\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\n    var NullLoaderEventRecorder = (function () {\n        function NullLoaderEventRecorder() {\n        }\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\n            // Nothing to do\n        };\n        NullLoaderEventRecorder.prototype.getEvents = function () {\n            return [];\n        };\n        NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\n        return NullLoaderEventRecorder;\n    }());\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\n    var ModuleManager = (function () {\n        function ModuleManager(scriptLoader) {\n            this._recorder = null;\n            this._config = new Configuration();\n            this._scriptLoader = scriptLoader;\n            this._modules = {};\n            this._knownModules = {};\n            this._inverseDependencies = {};\n            this._dependencies = {};\n            this._inversePluginDependencies = {};\n            this._queuedDefineCalls = [];\n            this._loadingScriptsCount = 0;\n            this._resolvedScriptPaths = {};\n            this._checksums = {};\n        }\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\n            var normalizedPath = normalize(needle);\n            var stackPieces = stack.split(/\\n/);\n            for (var i = 0; i < stackPieces.length; i++) {\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\n                if (m) {\n                    var stackPath = m[1];\n                    var stackLine = m[2];\n                    var stackColumn = m[3];\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\n                    stackPath = stackPath.substr(trimPathOffset);\n                    stackPath = normalize(stackPath);\n                    if (stackPath === normalizedPath) {\n                        var r = {\n                            line: parseInt(stackLine, 10),\n                            col: parseInt(stackColumn, 10)\n                        };\n                        if (r.line === 1) {\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\n                        }\n                        return r;\n                    }\n                }\n            }\n            throw new Error('Could not correlate define call site for needle ' + needle);\n        };\n        ModuleManager.prototype.getBuildInfo = function () {\n            var _this = this;\n            if (!this._config.isBuild()) {\n                return null;\n            }\n            return Object.keys(this._modules).map(function (moduleId) {\n                var m = _this._modules[moduleId];\n                var location = _this._resolvedScriptPaths[moduleId] || null;\n                var defineStack = m.getDefineCallStack();\n                return {\n                    id: moduleId,\n                    path: location,\n                    defineLocation: (location && defineStack ? ModuleManager._findRelevantLocationInStack(location, defineStack) : null),\n                    dependencies: m.getNormalizedDependencies(),\n                    shim: (_this._config.isShimmed(moduleId) ? _this._config.getShimmedModulesStr(moduleId) : null),\n                    exports: m.getExports()\n                };\n            });\n        };\n        ModuleManager.prototype.getRecorder = function () {\n            if (!this._recorder) {\n                if (this._config.shouldRecordStats()) {\n                    this._recorder = new LoaderEventRecorder(loaderAvailableTimestamp);\n                }\n                else {\n                    this._recorder = NullLoaderEventRecorder.INSTANCE;\n                }\n            }\n            return this._recorder;\n        };\n        ModuleManager.prototype.getLoaderEvents = function () {\n            return this.getRecorder().getEvents();\n        };\n        ModuleManager.prototype.recordChecksum = function (scriptSrc, checksum) {\n            this._checksums[scriptSrc] = checksum;\n        };\n        ModuleManager.prototype.getChecksums = function () {\n            return this._checksums;\n        };\n        /**\n         * Defines a module.\n         * @param id @see defineModule\n         * @param dependencies @see defineModule\n         * @param callback @see defineModule\n         */\n        ModuleManager.prototype.enqueueDefineModule = function (id, dependencies, callback) {\n            if (this._loadingScriptsCount === 0) {\n                // There are no scripts currently loading, so no load event will be fired, so the queue will not be consumed\n                this.defineModule(id, dependencies, callback, null, null);\n            }\n            else {\n                this._queuedDefineCalls.push({\n                    id: id,\n                    stack: null,\n                    dependencies: dependencies,\n                    callback: callback\n                });\n            }\n        };\n        /**\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\n         * @param dependecies @see defineModule\n         * @param callback @see defineModule\n         */\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\n            var stack = null;\n            if (this._config.isBuild()) {\n                stack = (new Error('StackLocation')).stack;\n            }\n            this._queuedDefineCalls.push({\n                id: null,\n                stack: stack,\n                dependencies: dependencies,\n                callback: callback\n            });\n        };\n        /**\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\n         * @param id An unique and absolute id of the module. This must not collide with another module's id\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\n         */\n        ModuleManager.prototype.defineModule = function (id, dependencies, callback, errorback, stack, moduleIdResolver) {\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(this._config, id); }\n            if (this._modules.hasOwnProperty(id)) {\n                if (!this._config.isDuplicateMessageIgnoredFor(id)) {\n                    console.warn('Duplicate definition of module \\'' + id + '\\'');\n                }\n                // Super important! Completely ignore duplicate module definition\n                return;\n            }\n            var moduleConfig = this._config.getConfigForModule(id);\n            var m = new Module(id, dependencies, callback, errorback, this.getRecorder(), moduleIdResolver, moduleConfig, stack);\n            this._modules[id] = m;\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\n            this._resolve(m);\n        };\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\n            if (typeof dependencies === 'string') {\n                return this.synchronousRequire(dependencies, moduleIdResolver);\n            }\n            this.defineModule(Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\n        };\n        /**\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\n         * @param id The unique and absolute id of the required module\n         * @return The exports of module 'id'\n         */\n        ModuleManager.prototype.synchronousRequire = function (id, moduleIdResolver) {\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(this._config, id); }\n            var moduleId = moduleIdResolver.resolveModule(id);\n            var bangIndex = moduleId.indexOf('!');\n            if (bangIndex >= 0) {\n                // This is a synchronous require for a plugin dependency, so be sure to normalize the pluginParam (the piece after '!')\n                var pluginId = moduleId.substring(0, bangIndex), pluginParam = moduleId.substring(bangIndex + 1, moduleId.length), plugin = {};\n                if (this._modules.hasOwnProperty(pluginId)) {\n                    plugin = this._modules[pluginId];\n                }\n                // Helper to normalize the part which comes after '!'\n                var normalize = function (_arg) {\n                    return moduleIdResolver.resolveModule(_arg);\n                };\n                if (typeof plugin.normalize === 'function') {\n                    pluginParam = plugin.normalize(pluginParam, normalize);\n                }\n                else {\n                    pluginParam = normalize(pluginParam);\n                }\n                moduleId = pluginId + '!' + pluginParam;\n            }\n            if (!this._modules.hasOwnProperty(moduleId)) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + moduleId + '\\'. This is the first mention of this module!');\n            }\n            var m = this._modules[moduleId];\n            if (!m.isComplete()) {\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + moduleId + '\\'. This module has not been resolved completely yet.');\n            }\n            return m.getExports();\n        };\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\n            var oldShouldRecordStats = this._config.shouldRecordStats();\n            if (shouldOverwrite) {\n                this._config = new Configuration(params);\n            }\n            else {\n                this._config = this._config.cloneAndMerge(params);\n            }\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\n                this._recorder = null;\n            }\n        };\n        ModuleManager.prototype.getConfigurationOptions = function () {\n            return this._config.getOptionsLiteral();\n        };\n        /**\n         * Callback from the scriptLoader when a module has been loaded.\n         * This means its code is available and has been executed.\n         */\n        ModuleManager.prototype._onLoad = function (id) {\n            var defineCall;\n            this._loadingScriptsCount--;\n            if (this._config.isShimmed(id)) {\n                // Do not consume queue, might end up consuming a module that is later expected\n                // If a shimmed module has loaded, create a define call for it\n                defineCall = this._config.getShimmedModuleDefine(id);\n                this.defineModule(id, defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n            }\n            else {\n                if (this._queuedDefineCalls.length === 0) {\n                    // Loaded a file and it didn't call `define`\n                    this._loadingScriptsCount++;\n                    this._onLoadError(id, new Error('No define call received from module ' + id + '.'));\n                }\n                else {\n                    // Consume queue until first anonymous define call\n                    // or until current id is found in the queue\n                    while (this._queuedDefineCalls.length > 0) {\n                        defineCall = this._queuedDefineCalls.shift();\n                        if (defineCall.id === id || defineCall.id === null) {\n                            // Hit an anonymous define call or its own define call\n                            defineCall.id = id;\n                            this.defineModule(defineCall.id, defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n                            break;\n                        }\n                        else {\n                            // Hit other named define calls\n                            this.defineModule(defineCall.id, defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n                        }\n                    }\n                }\n            }\n            if (this._loadingScriptsCount === 0) {\n                // No more on loads will be triggered, so make sure queue is empty\n                while (this._queuedDefineCalls.length > 0) {\n                    defineCall = this._queuedDefineCalls.shift();\n                    if (defineCall.id === null) {\n                        console.warn('Found an unmatched anonymous define call in the define queue. Ignoring it!');\n                        console.warn(defineCall.callback);\n                    }\n                    else {\n                        // Hit other named define calls\n                        this.defineModule(defineCall.id, defineCall.dependencies, defineCall.callback, null, defineCall.stack);\n                    }\n                }\n            }\n        };\n        /**\n         * Callback from the scriptLoader when a module hasn't been loaded.\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\n         */\n        ModuleManager.prototype._onLoadError = function (id, err) {\n            this._loadingScriptsCount--;\n            var error = {\n                errorCode: 'load',\n                moduleId: id,\n                neededBy: (this._inverseDependencies[id] ? this._inverseDependencies[id].slice(0) : []),\n                detail: err\n            };\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\n            var seenModuleId = {}, queueElement, someoneNotified = false, queue = [];\n            queue.push(id);\n            seenModuleId[id] = true;\n            while (queue.length > 0) {\n                queueElement = queue.shift();\n                if (this._modules[queueElement]) {\n                    someoneNotified = this._modules[queueElement].onDependencyError(error) || someoneNotified;\n                }\n                if (this._inverseDependencies[queueElement]) {\n                    for (var i = 0, len = this._inverseDependencies[queueElement].length; i < len; i++) {\n                        if (!seenModuleId.hasOwnProperty(this._inverseDependencies[queueElement][i])) {\n                            queue.push(this._inverseDependencies[queueElement][i]);\n                            seenModuleId[this._inverseDependencies[queueElement][i]] = true;\n                        }\n                    }\n                }\n            }\n            if (!someoneNotified) {\n                this._config.onError(error);\n            }\n        };\n        /**\n         * Module id has been loaded completely, its exports are available.\n         * @param id module's id\n         * @param exports module's exports\n         */\n        ModuleManager.prototype._onModuleComplete = function (id, exports) {\n            var i, len, inverseDependencyId, inverseDependency;\n            // Clean up module's dependencies since module is now complete\n            delete this._dependencies[id];\n            if (this._inverseDependencies.hasOwnProperty(id)) {\n                // Fetch and clear inverse dependencies\n                var inverseDependencies = this._inverseDependencies[id];\n                delete this._inverseDependencies[id];\n                // Resolve one inverse dependency at a time, always\n                // on the lookout for a completed module.\n                for (i = 0, len = inverseDependencies.length; i < len; i++) {\n                    inverseDependencyId = inverseDependencies[i];\n                    inverseDependency = this._modules[inverseDependencyId];\n                    inverseDependency.resolveDependency(id, exports);\n                    if (inverseDependency.isComplete()) {\n                        this._onModuleComplete(inverseDependencyId, inverseDependency.getExports());\n                    }\n                }\n            }\n            if (this._inversePluginDependencies.hasOwnProperty(id)) {\n                // This module is used as a plugin at least once\n                // Fetch and clear these inverse plugin dependencies\n                var inversePluginDependencies = this._inversePluginDependencies[id];\n                delete this._inversePluginDependencies[id];\n                // Resolve plugin dependencies one at a time\n                for (i = 0, len = inversePluginDependencies.length; i < len; i++) {\n                    var inversePluginDependencyId = inversePluginDependencies[i].moduleId;\n                    var inversePluginDependency = this._modules[inversePluginDependencyId];\n                    this._resolvePluginDependencySync(inversePluginDependencyId, inversePluginDependencies[i].dependencyId, exports);\n                    // Anonymous modules might already be gone at this point\n                    if (inversePluginDependency.isComplete()) {\n                        this._onModuleComplete(inversePluginDependencyId, inversePluginDependency.getExports());\n                    }\n                }\n            }\n            if (Utilities.isAnonymousModule(id)) {\n                // Clean up references to anonymous modules, to prevent memory leaks\n                delete this._modules[id];\n                delete this._dependencies[id];\n            }\n            else {\n                this._modules[id].cleanUp();\n            }\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns true if there is such a path or false otherwise.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._hasDependencyPath = function (from, to) {\n            var i, len, inQueue = {}, queue = [], element, dependencies, dependency;\n            // Insert 'from' in queue\n            queue.push(from);\n            inQueue[from] = true;\n            while (queue.length > 0) {\n                // Pop first inserted element of queue\n                element = queue.shift();\n                if (this._dependencies.hasOwnProperty(element)) {\n                    dependencies = this._dependencies[element];\n                    // Walk the element's dependencies\n                    for (i = 0, len = dependencies.length; i < len; i++) {\n                        dependency = dependencies[i];\n                        if (dependency === to) {\n                            // There is a path to 'to'\n                            return true;\n                        }\n                        if (!inQueue.hasOwnProperty(dependency)) {\n                            // Insert 'dependency' in queue\n                            inQueue[dependency] = true;\n                            queue.push(dependency);\n                        }\n                    }\n                }\n            }\n            // There is no path to 'to'\n            return false;\n        };\n        /**\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\n         * Returns cycle as array.\n         * @param from Module id to start at\n         * @param to Module id to look for\n         */\n        ModuleManager.prototype._findCyclePath = function (from, to, depth) {\n            if (from === to || depth === 50) {\n                return [from];\n            }\n            if (!this._dependencies.hasOwnProperty(from)) {\n                return null;\n            }\n            var path, dependencies = this._dependencies[from];\n            // Walk the element's dependencies\n            for (var i = 0, len = dependencies.length; i < len; i++) {\n                path = this._findCyclePath(dependencies[i], to, depth + 1);\n                if (path !== null) {\n                    path.push(from);\n                    return path;\n                }\n            }\n            return null;\n        };\n        /**\n         * Create the local 'require' that is passed into modules\n         */\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\n            var _this = this;\n            var result = (function (dependencies, callback, errorback) {\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\n            });\n            result.toUrl = function (id) {\n                return moduleIdResolver.requireToUrl(moduleIdResolver.resolveModule(id));\n            };\n            result.getStats = function () {\n                return _this.getLoaderEvents();\n            };\n            result.getChecksums = function () {\n                return _this.getChecksums();\n            };\n            result.__$__nodeRequire = global.nodeRequire;\n            return result;\n        };\n        /**\n         * Resolve a plugin dependency with the plugin loaded & complete\n         * @param moduleId The module that has this dependency\n         * @param dependencyId The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         * @param plugin The plugin (what the plugin exports)\n         */\n        ModuleManager.prototype._resolvePluginDependencySync = function (moduleId, dependencyId, plugin) {\n            var _this = this;\n            var m = this._modules[moduleId], moduleIdResolver = m.getModuleIdResolver(), bangIndex = dependencyId.indexOf('!'), pluginId = dependencyId.substring(0, bangIndex), pluginParam = dependencyId.substring(bangIndex + 1, dependencyId.length);\n            // Helper to normalize the part which comes after '!'\n            var normalize = function (_arg) {\n                return moduleIdResolver.resolveModule(_arg);\n            };\n            if (typeof plugin.normalize === 'function') {\n                pluginParam = plugin.normalize(pluginParam, normalize);\n            }\n            else {\n                pluginParam = normalize(pluginParam);\n            }\n            if (!plugin.dynamic) {\n                // Now normalize the entire dependency\n                var oldDependencyId = dependencyId;\n                dependencyId = pluginId + '!' + pluginParam;\n                // Let the module know that the dependency has been normalized so it can update its internal state\n                m.renameDependency(oldDependencyId, dependencyId);\n                this._resolveDependency(moduleId, dependencyId, function (moduleId) {\n                    // Delegate the loading of the resource to the plugin\n                    var load = (function (value) {\n                        _this.defineModule(dependencyId, [], value, null, null);\n                    });\n                    load.error = function (err) {\n                        _this._config.onError({\n                            errorCode: 'load',\n                            moduleId: dependencyId,\n                            neededBy: (_this._inverseDependencies[dependencyId] ? _this._inverseDependencies[dependencyId].slice(0) : []),\n                            detail: err\n                        });\n                    };\n                    plugin.load(pluginParam, _this._createRequire(moduleIdResolver), load, _this._config.getOptionsLiteral());\n                });\n            }\n            else {\n                // This plugin is dynamic and does not want the loader to cache anything on its behalf\n                // Delegate the loading of the resource to the plugin\n                var load = (function (value) {\n                    m.resolveDependency(dependencyId, value);\n                    if (m.isComplete()) {\n                        _this._onModuleComplete(moduleId, m.getExports());\n                    }\n                });\n                load.error = function (err) {\n                    _this._config.onError({\n                        errorCode: 'load',\n                        moduleId: dependencyId,\n                        neededBy: [moduleId],\n                        detail: err\n                    });\n                };\n                plugin.load(pluginParam, this._createRequire(moduleIdResolver), load, this._config.getOptionsLiteral());\n            }\n        };\n        /**\n         * Resolve a plugin dependency with the plugin not loaded or not complete yet\n         * @param moduleId The module that has this dependency\n         * @param dependencyId The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         */\n        ModuleManager.prototype._resolvePluginDependencyAsync = function (moduleId, dependencyId) {\n            var m = this._modules[moduleId], bangIndex = dependencyId.indexOf('!'), pluginId = dependencyId.substring(0, bangIndex);\n            // Record dependency for when the plugin gets loaded\n            this._inversePluginDependencies[pluginId] = this._inversePluginDependencies[pluginId] || [];\n            this._inversePluginDependencies[pluginId].push({\n                moduleId: moduleId,\n                dependencyId: dependencyId\n            });\n            if (!this._modules.hasOwnProperty(pluginId) && !this._knownModules.hasOwnProperty(pluginId)) {\n                // This is the first mention of module 'pluginId', so load it\n                this._knownModules[pluginId] = true;\n                this._loadModule(m.getModuleIdResolver(), pluginId);\n            }\n        };\n        /**\n         * Resolve a plugin dependency\n         * @param moduleId The module that has this dependency\n         * @param dependencyId The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\n         */\n        ModuleManager.prototype._resolvePluginDependency = function (moduleId, dependencyId) {\n            var bangIndex = dependencyId.indexOf('!'), pluginId = dependencyId.substring(0, bangIndex);\n            if (this._modules.hasOwnProperty(pluginId) && this._modules[pluginId].isComplete()) {\n                // Plugin has already been loaded & resolved\n                this._resolvePluginDependencySync(moduleId, dependencyId, this._modules[pluginId].getExports());\n            }\n            else {\n                // Plugin is not loaded or not resolved\n                this._resolvePluginDependencyAsync(moduleId, dependencyId);\n            }\n        };\n        /**\n         * Resolve a module dependency to a shimmed module and delegate the loading to loadCallback.\n         * @param moduleId The module that has this dependency\n         * @param dependencyId The normalized dependency that appears in the module -- this module is shimmed\n         * @param loadCallback Callback that will be called to trigger the loading of 'dependencyId' if needed\n         */\n        ModuleManager.prototype._resolveShimmedDependency = function (moduleId, dependencyId, loadCallback) {\n            // If a shimmed module has dependencies, we must first load those dependencies\n            // and only when those are loaded we can load the shimmed module.\n            // To achieve this, we inject a module definition with those dependencies\n            // and from its factory method we really load the shimmed module.\n            var defineInfo = this._config.getShimmedModuleDefine(dependencyId);\n            if (defineInfo.dependencies.length > 0) {\n                this.defineModule(Utilities.generateAnonymousModule(), defineInfo.dependencies, function () { return loadCallback(dependencyId); }, null, null, new ModuleIdResolver(this._config, dependencyId));\n            }\n            else {\n                loadCallback(dependencyId);\n            }\n        };\n        /**\n         * Resolve a module dependency and delegate the loading to loadCallback\n         * @param moduleId The module that has this dependency\n         * @param dependencyId The normalized dependency that appears in the module\n         * @param loadCallback Callback that will be called to trigger the loading of 'dependencyId' if needed\n         */\n        ModuleManager.prototype._resolveDependency = function (moduleId, dependencyId, loadCallback) {\n            var m = this._modules[moduleId];\n            if (this._modules.hasOwnProperty(dependencyId) && this._modules[dependencyId].isComplete()) {\n                // Dependency has already been loaded & resolved\n                m.resolveDependency(dependencyId, this._modules[dependencyId].getExports());\n            }\n            else {\n                // Dependency is not loaded or not resolved\n                // Record dependency\n                this._dependencies[moduleId].push(dependencyId);\n                if (this._hasDependencyPath(dependencyId, moduleId)) {\n                    console.warn('There is a dependency cycle between \\'' + dependencyId + '\\' and \\'' + moduleId + '\\'. The cyclic path follows:');\n                    var cyclePath = this._findCyclePath(dependencyId, moduleId, 0);\n                    cyclePath.reverse();\n                    cyclePath.push(dependencyId);\n                    console.warn(cyclePath.join(' => \\n'));\n                    // Break the cycle\n                    var dependency = this._modules.hasOwnProperty(dependencyId) ? this._modules[dependencyId] : null;\n                    var dependencyValue;\n                    if (dependency && dependency.isExportsPassedIn()) {\n                        // If dependency uses 'exports', then resolve it with that object\n                        dependencyValue = dependency.getExports();\n                    }\n                    // Resolve dependency with undefined or with 'exports' object\n                    m.resolveDependency(dependencyId, dependencyValue);\n                }\n                else {\n                    // Since we are actually waiting for this dependency,\n                    // record inverse dependency\n                    this._inverseDependencies[dependencyId] = this._inverseDependencies[dependencyId] || [];\n                    this._inverseDependencies[dependencyId].push(moduleId);\n                    if (!this._modules.hasOwnProperty(dependencyId) && !this._knownModules.hasOwnProperty(dependencyId)) {\n                        // This is the first mention of module 'dependencyId', so load it\n                        // Mark this module as loaded so we don't hit this case again\n                        this._knownModules[dependencyId] = true;\n                        if (this._config.isShimmed(dependencyId)) {\n                            this._resolveShimmedDependency(moduleId, dependencyId, loadCallback);\n                        }\n                        else {\n                            loadCallback(dependencyId);\n                        }\n                    }\n                }\n            }\n        };\n        ModuleManager.prototype._loadModule = function (anyModuleIdResolver, moduleId) {\n            var _this = this;\n            this._loadingScriptsCount++;\n            var paths = anyModuleIdResolver.moduleIdToPaths(moduleId);\n            var lastPathIndex = -1;\n            var loadNextPath = function (err) {\n                lastPathIndex++;\n                if (lastPathIndex >= paths.length) {\n                    // No more paths to try\n                    _this._onLoadError(moduleId, err);\n                }\n                else {\n                    var currentPath = paths[lastPathIndex];\n                    var recorder = _this.getRecorder();\n                    if (_this._config.isBuild() && currentPath === 'empty:') {\n                        _this._resolvedScriptPaths[moduleId] = currentPath;\n                        _this.enqueueDefineModule(moduleId, [], null);\n                        _this._onLoad(moduleId);\n                        return;\n                    }\n                    recorder.record(LoaderEventType.BeginLoadingScript, currentPath);\n                    _this._scriptLoader.load(currentPath, function () {\n                        if (_this._config.isBuild()) {\n                            _this._resolvedScriptPaths[moduleId] = currentPath;\n                        }\n                        recorder.record(LoaderEventType.EndLoadingScriptOK, currentPath);\n                        _this._onLoad(moduleId);\n                    }, function (err) {\n                        recorder.record(LoaderEventType.EndLoadingScriptError, currentPath);\n                        loadNextPath(err);\n                    }, recorder);\n                }\n            };\n            loadNextPath(null);\n        };\n        /**\n         * Examine the dependencies of module 'module' and resolve them as needed.\n         */\n        ModuleManager.prototype._resolve = function (m) {\n            var _this = this;\n            var i, len, id, dependencies, dependencyId, moduleIdResolver;\n            id = m.getId();\n            dependencies = m.getDependencies();\n            moduleIdResolver = m.getModuleIdResolver();\n            this._dependencies[id] = [];\n            var loadCallback = function (moduleId) { return _this._loadModule(moduleIdResolver, moduleId); };\n            for (i = 0, len = dependencies.length; i < len; i++) {\n                dependencyId = dependencies[i];\n                if (dependencyId === 'require') {\n                    m.resolveDependency(dependencyId, this._createRequire(moduleIdResolver));\n                    continue;\n                }\n                else {\n                    if (dependencyId.indexOf('!') >= 0) {\n                        this._resolvePluginDependency(id, dependencyId);\n                    }\n                    else {\n                        this._resolveDependency(id, dependencyId, loadCallback);\n                    }\n                }\n            }\n            if (m.isComplete()) {\n                // This module was completed as soon as its been seen.\n                this._onModuleComplete(id, m.getExports());\n            }\n        };\n        return ModuleManager;\n    }());\n    AMDLoader.ModuleManager = ModuleManager;\n    /**\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\n     */\n    var OnlyOnceScriptLoader = (function () {\n        function OnlyOnceScriptLoader(actualScriptLoader) {\n            this.actualScriptLoader = actualScriptLoader;\n            this.callbackMap = {};\n        }\n        OnlyOnceScriptLoader.prototype.setModuleManager = function (moduleManager) {\n            this.actualScriptLoader.setModuleManager(moduleManager);\n        };\n        OnlyOnceScriptLoader.prototype.load = function (scriptSrc, callback, errorback, recorder) {\n            var _this = this;\n            var scriptCallbacks = {\n                callback: callback,\n                errorback: errorback\n            };\n            if (this.callbackMap.hasOwnProperty(scriptSrc)) {\n                this.callbackMap[scriptSrc].push(scriptCallbacks);\n                return;\n            }\n            this.callbackMap[scriptSrc] = [scriptCallbacks];\n            this.actualScriptLoader.load(scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); }, recorder);\n        };\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\n            var scriptCallbacks = this.callbackMap[scriptSrc];\n            delete this.callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].callback();\n            }\n        };\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\n            var scriptCallbacks = this.callbackMap[scriptSrc];\n            delete this.callbackMap[scriptSrc];\n            for (var i = 0; i < scriptCallbacks.length; i++) {\n                scriptCallbacks[i].errorback(err);\n            }\n        };\n        return OnlyOnceScriptLoader;\n    }());\n    var BrowserScriptLoader = (function () {\n        function BrowserScriptLoader() {\n        }\n        /**\n         * Attach load / error listeners to a script element and remove them when either one has fired.\n         * Implemented for browssers supporting 'onreadystatechange' events, such as IE8 or IE9\n         */\n        BrowserScriptLoader.prototype.attachListenersV1 = function (script, callback, errorback) {\n            var unbind = function () {\n                script.detachEvent('onreadystatechange', loadEventListener);\n                if (script.addEventListener) {\n                    script.removeEventListener('error', errorEventListener);\n                }\n            };\n            var loadEventListener = function (e) {\n                if (script.readyState === 'loaded' || script.readyState === 'complete') {\n                    unbind();\n                    callback();\n                }\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            script.attachEvent('onreadystatechange', loadEventListener);\n            if (script.addEventListener) {\n                script.addEventListener('error', errorEventListener);\n            }\n        };\n        /**\n         * Attach load / error listeners to a script element and remove them when either one has fired.\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\n         */\n        BrowserScriptLoader.prototype.attachListenersV2 = function (script, callback, errorback) {\n            var unbind = function () {\n                script.removeEventListener('load', loadEventListener);\n                script.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            script.addEventListener('load', loadEventListener);\n            script.addEventListener('error', errorEventListener);\n        };\n        BrowserScriptLoader.prototype.setModuleManager = function (moduleManager) {\n            /* Intentional empty */\n        };\n        BrowserScriptLoader.prototype.load = function (scriptSrc, callback, errorback) {\n            var script = document.createElement('script');\n            script.setAttribute('async', 'async');\n            script.setAttribute('type', 'text/javascript');\n            if (global.attachEvent) {\n                this.attachListenersV1(script, callback, errorback);\n            }\n            else {\n                this.attachListenersV2(script, callback, errorback);\n            }\n            script.setAttribute('src', scriptSrc);\n            document.getElementsByTagName('head')[0].appendChild(script);\n        };\n        return BrowserScriptLoader;\n    }());\n    var WorkerScriptLoader = (function () {\n        function WorkerScriptLoader() {\n            this.loadCalls = [];\n            this.loadTimeout = -1;\n        }\n        WorkerScriptLoader.prototype.setModuleManager = function (moduleManager) {\n            /* Intentional empty */\n        };\n        WorkerScriptLoader.prototype.load = function (scriptSrc, callback, errorback) {\n            var _this = this;\n            this.loadCalls.push({\n                scriptSrc: scriptSrc,\n                callback: callback,\n                errorback: errorback\n            });\n            if (navigator.userAgent.indexOf('Firefox') >= 0) {\n                // Firefox fails installing the timer every now and then :(\n                this._load();\n            }\n            else {\n                if (this.loadTimeout === -1) {\n                    this.loadTimeout = setTimeout(function () {\n                        _this.loadTimeout = -1;\n                        _this._load();\n                    }, 0);\n                }\n            }\n        };\n        WorkerScriptLoader.prototype._load = function () {\n            var loadCalls = this.loadCalls;\n            this.loadCalls = [];\n            var i, len = loadCalls.length, scripts = [];\n            for (i = 0; i < len; i++) {\n                scripts.push(loadCalls[i].scriptSrc);\n            }\n            var errorOccured = false;\n            try {\n                importScripts.apply(null, scripts);\n            }\n            catch (e) {\n                errorOccured = true;\n                for (i = 0; i < len; i++) {\n                    loadCalls[i].errorback(e);\n                }\n            }\n            if (!errorOccured) {\n                for (i = 0; i < len; i++) {\n                    loadCalls[i].callback();\n                }\n            }\n        };\n        return WorkerScriptLoader;\n    }());\n    var NodeScriptLoader = (function () {\n        function NodeScriptLoader() {\n            this._initialized = false;\n        }\n        NodeScriptLoader.prototype.setModuleManager = function (moduleManager) {\n            this._moduleManager = moduleManager;\n        };\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\n            if (this._initialized) {\n                return;\n            }\n            this._initialized = true;\n            this._fs = nodeRequire('fs');\n            this._vm = nodeRequire('vm');\n            this._path = nodeRequire('path');\n            this._crypto = nodeRequire('crypto');\n        };\n        NodeScriptLoader.prototype.load = function (scriptSrc, callback, errorback, recorder) {\n            var _this = this;\n            var opts = this._moduleManager.getConfigurationOptions();\n            var checksum = opts.checksum || false;\n            var nodeRequire = (opts.nodeRequire || global.nodeRequire);\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\n            this._init(nodeRequire);\n            if (/^node\\|/.test(scriptSrc)) {\n                var pieces = scriptSrc.split('|');\n                var moduleExports = null;\n                try {\n                    recorder.record(LoaderEventType.NodeBeginNativeRequire, pieces[2]);\n                    moduleExports = nodeRequire(pieces[2]);\n                }\n                catch (err) {\n                    recorder.record(LoaderEventType.NodeEndNativeRequire, pieces[2]);\n                    errorback(err);\n                    return;\n                }\n                recorder.record(LoaderEventType.NodeEndNativeRequire, pieces[2]);\n                this._moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports; });\n                callback();\n            }\n            else {\n                scriptSrc = Utilities.fileUriToFilePath(scriptSrc);\n                this._fs.readFile(scriptSrc, { encoding: 'utf8' }, function (err, data) {\n                    if (err) {\n                        errorback(err);\n                        return;\n                    }\n                    if (checksum) {\n                        var hash = _this._crypto\n                            .createHash('md5')\n                            .update(data, 'utf8')\n                            .digest('base64')\n                            .replace(/=+$/, '');\n                        _this._moduleManager.recordChecksum(scriptSrc, hash);\n                    }\n                    recorder.record(LoaderEventType.NodeBeginEvaluatingScript, scriptSrc);\n                    var vmScriptSrc = _this._path.normalize(scriptSrc);\n                    // Make the script src friendly towards electron\n                    if (isElectronRenderer) {\n                        var driveLetterMatch = vmScriptSrc.match(/^([a-z])\\:(.*)/i);\n                        if (driveLetterMatch) {\n                            vmScriptSrc = driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2];\n                        }\n                        vmScriptSrc = 'file:///' + vmScriptSrc.replace(/\\\\/g, '/');\n                    }\n                    var contents, prefix = '(function (require, define, __filename, __dirname) { ', suffix = '\\n});';\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\n                        contents = prefix + data.substring(1) + suffix;\n                    }\n                    else {\n                        contents = prefix + data + suffix;\n                    }\n                    contents = nodeInstrumenter(contents, vmScriptSrc);\n                    var r;\n                    if (/^v0\\.12/.test(process.version)) {\n                        r = _this._vm.runInThisContext(contents, { filename: vmScriptSrc });\n                    }\n                    else {\n                        r = _this._vm.runInThisContext(contents, vmScriptSrc);\n                    }\n                    r.call(global, RequireFunc, DefineFunc, vmScriptSrc, _this._path.dirname(scriptSrc));\n                    recorder.record(LoaderEventType.NodeEndEvaluatingScript, scriptSrc);\n                    callback();\n                });\n            }\n        };\n        NodeScriptLoader._BOM = 0xFEFF;\n        return NodeScriptLoader;\n    }());\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n    // ------------------------------------------------------------------------\n    // define\n    var DefineFunc = (function () {\n        function DefineFunc(id, dependencies, callback) {\n            if (typeof id !== 'string') {\n                callback = dependencies;\n                dependencies = id;\n                id = null;\n            }\n            if (typeof dependencies !== 'object' || !Utilities.isArray(dependencies)) {\n                callback = dependencies;\n                dependencies = null;\n            }\n            if (!dependencies) {\n                dependencies = ['require', 'exports', 'module'];\n            }\n            if (id) {\n                moduleManager.enqueueDefineModule(id, dependencies, callback);\n            }\n            else {\n                moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\n            }\n        }\n        DefineFunc.amd = {\n            jQuery: true\n        };\n        return DefineFunc;\n    }());\n    var RequireFunc = (function () {\n        function RequireFunc() {\n            if (arguments.length === 1) {\n                if ((arguments[0] instanceof Object) && !Utilities.isArray(arguments[0])) {\n                    RequireFunc.config(arguments[0]);\n                    return;\n                }\n                if (typeof arguments[0] === 'string') {\n                    return moduleManager.synchronousRequire(arguments[0]);\n                }\n            }\n            if (arguments.length === 2 || arguments.length === 3) {\n                if (Utilities.isArray(arguments[0])) {\n                    moduleManager.defineModule(Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\n                    return;\n                }\n            }\n            throw new Error('Unrecognized require call');\n        }\n        RequireFunc.config = function (params, shouldOverwrite) {\n            if (shouldOverwrite === void 0) { shouldOverwrite = false; }\n            moduleManager.configure(params, shouldOverwrite);\n        };\n        RequireFunc.getConfig = function () {\n            return moduleManager.getConfigurationOptions();\n        };\n        /**\n         * Non standard extension to reset completely the loader state. This is used for running amdjs tests\n         */\n        RequireFunc.reset = function () {\n            moduleManager = new ModuleManager(scriptLoader);\n            scriptLoader.setModuleManager(moduleManager);\n        };\n        /**\n         * Non standard extension to fetch loader state for building purposes.\n         */\n        RequireFunc.getBuildInfo = function () {\n            return moduleManager.getBuildInfo();\n        };\n        /**\n         * Non standard extension to fetch loader events\n         */\n        RequireFunc.getStats = function () {\n            return moduleManager.getLoaderEvents();\n        };\n        /**\n         * Non standard extension to fetch checksums\n         */\n        RequireFunc.getChecksums = function () {\n            return moduleManager.getChecksums();\n        };\n        return RequireFunc;\n    }());\n    var global = _amdLoaderGlobal, hasPerformanceNow = (global.performance && typeof global.performance.now === 'function'), isWebWorker, isElectronRenderer, isElectronMain, isNode, scriptLoader, moduleManager, loaderAvailableTimestamp;\n    function initVars() {\n        isWebWorker = (typeof global.importScripts === 'function');\n        isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions['electron'] !== 'undefined' && process.type === 'renderer');\n        isElectronMain = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions['electron'] !== 'undefined' && process.type === 'browser');\n        isNode = (typeof module !== 'undefined' && !!module.exports);\n        if (isWebWorker) {\n            scriptLoader = new OnlyOnceScriptLoader(new WorkerScriptLoader());\n        }\n        else if (isNode) {\n            scriptLoader = new OnlyOnceScriptLoader(new NodeScriptLoader());\n        }\n        else {\n            scriptLoader = new OnlyOnceScriptLoader(new BrowserScriptLoader());\n        }\n        moduleManager = new ModuleManager(scriptLoader);\n        scriptLoader.setModuleManager(moduleManager);\n    }\n    function initConsole() {\n        // Define used console.* functions, in order to not fail in environments where they are not available\n        if (!isNode) {\n            if (!global.console) {\n                global.console = {};\n            }\n            if (!global.console.log) {\n                global.console.log = function () { };\n            }\n            if (!global.console.warn) {\n                global.console.warn = global.console.log;\n            }\n            if (!global.console.error) {\n                global.console.error = global.console.log;\n            }\n        }\n    }\n    function initMainScript() {\n        if (!isWebWorker && !isNode) {\n            window.onload = function () {\n                var i, len, main, scripts = document.getElementsByTagName('script');\n                // Look through all the scripts for the data-main attribute\n                for (i = 0, len = scripts.length; i < len; i++) {\n                    main = scripts[i].getAttribute('data-main');\n                    if (main) {\n                        break;\n                    }\n                }\n                // Load the main script\n                if (main) {\n                    moduleManager.defineModule(Utilities.generateAnonymousModule(), [main], null, null, null, new ModuleIdResolver(new Configuration(), ''));\n                }\n            };\n        }\n    }\n    function init() {\n        initVars();\n        initConsole();\n        initMainScript();\n        if (isNode) {\n            var _nodeRequire = (global.require || require);\n            var nodeRequire = function (what) {\n                moduleManager.getRecorder().record(LoaderEventType.NodeBeginNativeRequire, what);\n                var r = _nodeRequire(what);\n                moduleManager.getRecorder().record(LoaderEventType.NodeEndNativeRequire, what);\n                return r;\n            };\n            global.nodeRequire = nodeRequire;\n            RequireFunc.nodeRequire = nodeRequire;\n        }\n        if (isNode && !isElectronRenderer) {\n            module.exports = RequireFunc;\n            // These two defs are fore the local closure defined in node in the case that the loader is concatenated\n            define = function () {\n                DefineFunc.apply(null, arguments);\n            };\n            require = RequireFunc;\n        }\n        else {\n            // The global variable require can configure the loader\n            if (typeof global.require !== 'undefined' && typeof global.require !== 'function') {\n                RequireFunc.config(global.require);\n            }\n            if (!isElectronRenderer) {\n                global.define = define = DefineFunc;\n            }\n            else {\n                define = function () {\n                    DefineFunc.apply(null, arguments);\n                };\n            }\n            global.require = RequireFunc;\n            global.require.__$__nodeRequire = nodeRequire;\n        }\n    }\n    if (typeof global.define !== 'function' || !global.define.amd) {\n        init();\n        loaderAvailableTimestamp = getHighPerformanceTimestamp();\n    }\n})(AMDLoader || (AMDLoader = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar _cssPluginGlobal = this;\nvar CSSLoaderPlugin;\n(function (CSSLoaderPlugin) {\n    var global = _cssPluginGlobal || {};\n    /**\n     * Known issue:\n     * - In IE there is no way to know if the CSS file loaded successfully or not.\n     */\n    var BrowserCSSLoader = (function () {\n        function BrowserCSSLoader() {\n            this._pendingLoads = 0;\n        }\n        BrowserCSSLoader.prototype.attachListeners = function (name, linkNode, callback, errorback) {\n            var unbind = function () {\n                linkNode.removeEventListener('load', loadEventListener);\n                linkNode.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            linkNode.addEventListener('load', loadEventListener);\n            linkNode.addEventListener('error', errorEventListener);\n        };\n        BrowserCSSLoader.prototype._onLoad = function (name, callback) {\n            this._pendingLoads--;\n            callback();\n        };\n        BrowserCSSLoader.prototype._onLoadError = function (name, errorback, err) {\n            this._pendingLoads--;\n            errorback(err);\n        };\n        BrowserCSSLoader.prototype._insertLinkNode = function (linkNode) {\n            this._pendingLoads++;\n            var head = document.head || document.getElementsByTagName('head')[0];\n            var other = head.getElementsByTagName('link') || document.head.getElementsByTagName('script');\n            if (other.length > 0) {\n                head.insertBefore(linkNode, other[other.length - 1]);\n            }\n            else {\n                head.appendChild(linkNode);\n            }\n        };\n        BrowserCSSLoader.prototype.createLinkTag = function (name, cssUrl, externalCallback, externalErrorback) {\n            var _this = this;\n            var linkNode = document.createElement('link');\n            linkNode.setAttribute('rel', 'stylesheet');\n            linkNode.setAttribute('type', 'text/css');\n            linkNode.setAttribute('data-name', name);\n            var callback = function () { return _this._onLoad(name, externalCallback); };\n            var errorback = function (err) { return _this._onLoadError(name, externalErrorback, err); };\n            this.attachListeners(name, linkNode, callback, errorback);\n            linkNode.setAttribute('href', cssUrl);\n            return linkNode;\n        };\n        BrowserCSSLoader.prototype._linkTagExists = function (name, cssUrl) {\n            var i, len, nameAttr, hrefAttr, links = document.getElementsByTagName('link');\n            for (i = 0, len = links.length; i < len; i++) {\n                nameAttr = links[i].getAttribute('data-name');\n                hrefAttr = links[i].getAttribute('href');\n                if (nameAttr === name || hrefAttr === cssUrl) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        BrowserCSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\n            if (this._linkTagExists(name, cssUrl)) {\n                externalCallback();\n                return;\n            }\n            var linkNode = this.createLinkTag(name, cssUrl, externalCallback, externalErrorback);\n            this._insertLinkNode(linkNode);\n        };\n        return BrowserCSSLoader;\n    }());\n    /**\n     * Prior to IE10, IE could not go above 31 stylesheets in a page\n     * http://blogs.msdn.com/b/ieinternals/archive/2011/05/14/internet-explorer-stylesheet-rule-selector-import-sheet-limit-maximum.aspx\n     *\n     * The general strategy here is to not write more than 31 link nodes to the page at the same time\n     * When stylesheets get loaded, they will get merged one into another to free up\n     * some positions for new link nodes.\n     */\n    var IE9CSSLoader = (function (_super) {\n        __extends(IE9CSSLoader, _super);\n        function IE9CSSLoader() {\n            _super.call(this);\n            this._blockedLoads = [];\n            this._mergeStyleSheetsTimeout = -1;\n        }\n        IE9CSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\n            if (this._linkTagExists(name, cssUrl)) {\n                externalCallback();\n                return;\n            }\n            var linkNode = this.createLinkTag(name, cssUrl, externalCallback, externalErrorback);\n            if (this._styleSheetCount() < 31) {\n                this._insertLinkNode(linkNode);\n            }\n            else {\n                this._blockedLoads.push(linkNode);\n                this._handleBlocked();\n            }\n        };\n        IE9CSSLoader.prototype._styleSheetCount = function () {\n            var linkCount = document.getElementsByTagName('link').length;\n            var styleCount = document.getElementsByTagName('style').length;\n            return linkCount + styleCount;\n        };\n        IE9CSSLoader.prototype._onLoad = function (name, callback) {\n            _super.prototype._onLoad.call(this, name, callback);\n            this._handleBlocked();\n        };\n        IE9CSSLoader.prototype._onLoadError = function (name, errorback, err) {\n            _super.prototype._onLoadError.call(this, name, errorback, err);\n            this._handleBlocked();\n        };\n        IE9CSSLoader.prototype._handleBlocked = function () {\n            var _this = this;\n            var blockedLoadsCount = this._blockedLoads.length;\n            if (blockedLoadsCount > 0 && this._mergeStyleSheetsTimeout === -1) {\n                this._mergeStyleSheetsTimeout = window.setTimeout(function () { return _this._mergeStyleSheets(); }, 0);\n            }\n        };\n        IE9CSSLoader.prototype._mergeStyleSheet = function (dstPath, dst, srcPath, src) {\n            for (var i = src.rules.length - 1; i >= 0; i--) {\n                dst.insertRule(Utilities.rewriteUrls(srcPath, dstPath, src.rules[i].cssText), 0);\n            }\n        };\n        IE9CSSLoader.prototype._asIE9HTMLLinkElement = function (linkElement) {\n            return linkElement;\n        };\n        IE9CSSLoader.prototype._mergeStyleSheets = function () {\n            this._mergeStyleSheetsTimeout = -1;\n            var blockedLoadsCount = this._blockedLoads.length;\n            var i, linkDomNodes = document.getElementsByTagName('link');\n            var linkDomNodesCount = linkDomNodes.length;\n            var mergeCandidates = [];\n            for (i = 0; i < linkDomNodesCount; i++) {\n                if (linkDomNodes[i].readyState === 'loaded' || linkDomNodes[i].readyState === 'complete') {\n                    mergeCandidates.push({\n                        linkNode: linkDomNodes[i],\n                        rulesLength: this._asIE9HTMLLinkElement(linkDomNodes[i]).styleSheet.rules.length\n                    });\n                }\n            }\n            var mergeCandidatesCount = mergeCandidates.length;\n            // Just a little legend here :)\n            // - linkDomNodesCount: total number of link nodes in the DOM (this should be kept <= 31)\n            // - mergeCandidatesCount: loaded (finished) link nodes in the DOM (only these can be merged)\n            // - blockedLoadsCount: remaining number of load requests that did not fit in before (because of the <= 31 constraint)\n            // Now comes the heuristic part, we don't want to do too much work with the merging of styles,\n            // but we do need to merge stylesheets to free up loading slots.\n            var mergeCount = Math.min(Math.floor(mergeCandidatesCount / 2), blockedLoadsCount);\n            // Sort the merge candidates descending (least rules last)\n            mergeCandidates.sort(function (a, b) {\n                return b.rulesLength - a.rulesLength;\n            });\n            var srcIndex, dstIndex;\n            for (i = 0; i < mergeCount; i++) {\n                srcIndex = mergeCandidates.length - 1 - i;\n                dstIndex = i % (mergeCandidates.length - mergeCount);\n                // Merge rules of src into dst\n                this._mergeStyleSheet(mergeCandidates[dstIndex].linkNode.href, this._asIE9HTMLLinkElement(mergeCandidates[dstIndex].linkNode).styleSheet, mergeCandidates[srcIndex].linkNode.href, this._asIE9HTMLLinkElement(mergeCandidates[srcIndex].linkNode).styleSheet);\n                // Remove dom node of src\n                mergeCandidates[srcIndex].linkNode.parentNode.removeChild(mergeCandidates[srcIndex].linkNode);\n                linkDomNodesCount--;\n            }\n            var styleSheetCount = this._styleSheetCount();\n            while (styleSheetCount < 31 && this._blockedLoads.length > 0) {\n                this._insertLinkNode(this._blockedLoads.shift());\n                styleSheetCount++;\n            }\n        };\n        return IE9CSSLoader;\n    }(BrowserCSSLoader));\n    var IE8CSSLoader = (function (_super) {\n        __extends(IE8CSSLoader, _super);\n        function IE8CSSLoader() {\n            _super.call(this);\n        }\n        IE8CSSLoader.prototype.attachListeners = function (name, linkNode, callback, errorback) {\n            linkNode.onload = function () {\n                linkNode.onload = null;\n                callback();\n            };\n        };\n        return IE8CSSLoader;\n    }(IE9CSSLoader));\n    var NodeCSSLoader = (function () {\n        function NodeCSSLoader() {\n            this.fs = require.nodeRequire('fs');\n        }\n        NodeCSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\n            var contents = this.fs.readFileSync(cssUrl, 'utf8');\n            // Remove BOM\n            if (contents.charCodeAt(0) === NodeCSSLoader.BOM_CHAR_CODE) {\n                contents = contents.substring(1);\n            }\n            externalCallback(contents);\n        };\n        NodeCSSLoader.BOM_CHAR_CODE = 65279;\n        return NodeCSSLoader;\n    }());\n    // ------------------------------ Finally, the plugin\n    var CSSPlugin = (function () {\n        function CSSPlugin(cssLoader) {\n            this.cssLoader = cssLoader;\n        }\n        CSSPlugin.prototype.load = function (name, req, load, config) {\n            config = config || {};\n            var myConfig = config['vs/css'] || {};\n            global.inlineResources = myConfig.inlineResources;\n            var cssUrl = req.toUrl(name + '.css');\n            this.cssLoader.load(name, cssUrl, function (contents) {\n                // Contents has the CSS file contents if we are in a build\n                if (config.isBuild) {\n                    CSSPlugin.BUILD_MAP[name] = contents;\n                    CSSPlugin.BUILD_PATH_MAP[name] = cssUrl;\n                }\n                load({});\n            }, function (err) {\n                if (typeof load.error === 'function') {\n                    load.error('Could not find ' + cssUrl + ' or it was empty');\n                }\n            });\n        };\n        CSSPlugin.prototype.write = function (pluginName, moduleName, write) {\n            // getEntryPoint is a Monaco extension to r.js\n            var entryPoint = write.getEntryPoint();\n            // r.js destroys the context of this plugin between calling 'write' and 'writeFile'\n            // so the only option at this point is to leak the data to a global\n            global.cssPluginEntryPoints = global.cssPluginEntryPoints || {};\n            global.cssPluginEntryPoints[entryPoint] = global.cssPluginEntryPoints[entryPoint] || [];\n            global.cssPluginEntryPoints[entryPoint].push({\n                moduleName: moduleName,\n                contents: CSSPlugin.BUILD_MAP[moduleName],\n                fsPath: CSSPlugin.BUILD_PATH_MAP[moduleName],\n            });\n            write.asModule(pluginName + '!' + moduleName, 'define([\\'vs/css!' + entryPoint + '\\'], {});');\n        };\n        CSSPlugin.prototype.writeFile = function (pluginName, moduleName, req, write, config) {\n            if (global.cssPluginEntryPoints && global.cssPluginEntryPoints.hasOwnProperty(moduleName)) {\n                var fileName = req.toUrl(moduleName + '.css');\n                var contents = [\n                    '/*---------------------------------------------------------',\n                    ' * Copyright (c) Microsoft Corporation. All rights reserved.',\n                    ' *--------------------------------------------------------*/'\n                ], entries = global.cssPluginEntryPoints[moduleName];\n                for (var i = 0; i < entries.length; i++) {\n                    if (global.inlineResources) {\n                        contents.push(Utilities.rewriteOrInlineUrls(entries[i].fsPath, entries[i].moduleName, moduleName, entries[i].contents, global.inlineResources === 'base64'));\n                    }\n                    else {\n                        contents.push(Utilities.rewriteUrls(entries[i].moduleName, moduleName, entries[i].contents));\n                    }\n                }\n                write(fileName, contents.join('\\r\\n'));\n            }\n        };\n        CSSPlugin.prototype.getInlinedResources = function () {\n            return global.cssInlinedResources || [];\n        };\n        CSSPlugin.BUILD_MAP = {};\n        CSSPlugin.BUILD_PATH_MAP = {};\n        return CSSPlugin;\n    }());\n    CSSLoaderPlugin.CSSPlugin = CSSPlugin;\n    var Utilities = (function () {\n        function Utilities() {\n        }\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        /**\n         * Find the path of a file.\n         */\n        Utilities.pathOf = function (filename) {\n            var lastSlash = filename.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                return filename.substr(0, lastSlash + 1);\n            }\n            else {\n                return '';\n            }\n        };\n        /**\n         * A conceptual a + b for paths.\n         * Takes into account if `a` contains a protocol.\n         * Also normalizes the result: e.g.: a/b/ + ../c => a/c\n         */\n        Utilities.joinPaths = function (a, b) {\n            function findSlashIndexAfterPrefix(haystack, prefix) {\n                if (Utilities.startsWith(haystack, prefix)) {\n                    return Math.max(prefix.length, haystack.indexOf('/', prefix.length));\n                }\n                return 0;\n            }\n            var aPathStartIndex = 0;\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, '//');\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'http://');\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'https://');\n            function pushPiece(pieces, piece) {\n                if (piece === './') {\n                    // Ignore\n                    return;\n                }\n                if (piece === '../') {\n                    var prevPiece = (pieces.length > 0 ? pieces[pieces.length - 1] : null);\n                    if (prevPiece && prevPiece === '/') {\n                        // Ignore\n                        return;\n                    }\n                    if (prevPiece && prevPiece !== '../') {\n                        // Pop\n                        pieces.pop();\n                        return;\n                    }\n                }\n                // Push\n                pieces.push(piece);\n            }\n            function push(pieces, path) {\n                while (path.length > 0) {\n                    var slashIndex = path.indexOf('/');\n                    var piece = (slashIndex >= 0 ? path.substring(0, slashIndex + 1) : path);\n                    path = (slashIndex >= 0 ? path.substring(slashIndex + 1) : '');\n                    pushPiece(pieces, piece);\n                }\n            }\n            var pieces = [];\n            push(pieces, a.substr(aPathStartIndex));\n            if (b.length > 0 && b.charAt(0) === '/') {\n                pieces = [];\n            }\n            push(pieces, b);\n            return a.substring(0, aPathStartIndex) + pieces.join('');\n        };\n        Utilities.commonPrefix = function (str1, str2) {\n            var len = Math.min(str1.length, str2.length);\n            for (var i = 0; i < len; i++) {\n                if (str1.charCodeAt(i) !== str2.charCodeAt(i)) {\n                    break;\n                }\n            }\n            return str1.substring(0, i);\n        };\n        Utilities.commonFolderPrefix = function (fromPath, toPath) {\n            var prefix = Utilities.commonPrefix(fromPath, toPath);\n            var slashIndex = prefix.lastIndexOf('/');\n            if (slashIndex === -1) {\n                return '';\n            }\n            return prefix.substring(0, slashIndex + 1);\n        };\n        Utilities.relativePath = function (fromPath, toPath) {\n            if (Utilities.startsWith(toPath, '/') || Utilities.startsWith(toPath, 'http://') || Utilities.startsWith(toPath, 'https://')) {\n                return toPath;\n            }\n            // Ignore common folder prefix\n            var prefix = Utilities.commonFolderPrefix(fromPath, toPath);\n            fromPath = fromPath.substr(prefix.length);\n            toPath = toPath.substr(prefix.length);\n            var upCount = fromPath.split('/').length;\n            var result = '';\n            for (var i = 1; i < upCount; i++) {\n                result += '../';\n            }\n            return result + toPath;\n        };\n        Utilities._replaceURL = function (contents, replacer) {\n            // Use \")\" as the terminator as quotes are oftentimes not used at all\n            return contents.replace(/url\\(\\s*([^\\)]+)\\s*\\)?/g, function (_) {\n                var matches = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    matches[_i - 1] = arguments[_i];\n                }\n                var url = matches[0];\n                // Eliminate starting quotes (the initial whitespace is not captured)\n                if (url.charAt(0) === '\"' || url.charAt(0) === '\\'') {\n                    url = url.substring(1);\n                }\n                // The ending whitespace is captured\n                while (url.length > 0 && (url.charAt(url.length - 1) === ' ' || url.charAt(url.length - 1) === '\\t')) {\n                    url = url.substring(0, url.length - 1);\n                }\n                // Eliminate ending quotes\n                if (url.charAt(url.length - 1) === '\"' || url.charAt(url.length - 1) === '\\'') {\n                    url = url.substring(0, url.length - 1);\n                }\n                if (!Utilities.startsWith(url, 'data:') && !Utilities.startsWith(url, 'http://') && !Utilities.startsWith(url, 'https://')) {\n                    url = replacer(url);\n                }\n                return 'url(' + url + ')';\n            });\n        };\n        Utilities.rewriteUrls = function (originalFile, newFile, contents) {\n            return this._replaceURL(contents, function (url) {\n                var absoluteUrl = Utilities.joinPaths(Utilities.pathOf(originalFile), url);\n                return Utilities.relativePath(newFile, absoluteUrl);\n            });\n        };\n        Utilities.rewriteOrInlineUrls = function (originalFileFSPath, originalFile, newFile, contents, forceBase64) {\n            var fs = require.nodeRequire('fs');\n            var path = require.nodeRequire('path');\n            return this._replaceURL(contents, function (url) {\n                if (/\\.(svg|png)$/.test(url)) {\n                    var fsPath = path.join(path.dirname(originalFileFSPath), url);\n                    var fileContents = fs.readFileSync(fsPath);\n                    if (fileContents.length < 3000) {\n                        global.cssInlinedResources = global.cssInlinedResources || [];\n                        var normalizedFSPath = fsPath.replace(/\\\\/g, '/');\n                        if (global.cssInlinedResources.indexOf(normalizedFSPath) >= 0) {\n                            console.warn('CSS INLINING IMAGE AT ' + fsPath + ' MORE THAN ONCE. CONSIDER CONSOLIDATING CSS RULES');\n                        }\n                        global.cssInlinedResources.push(normalizedFSPath);\n                        var MIME = /\\.svg$/.test(url) ? 'image/svg+xml' : 'image/png';\n                        var DATA = ';base64,' + fileContents.toString('base64');\n                        if (!forceBase64 && /\\.svg$/.test(url)) {\n                            // .svg => url encode as explained at https://codepen.io/tigt/post/optimizing-svgs-in-data-uris\n                            var newText = fileContents.toString()\n                                .replace(/\"/g, '\\'')\n                                .replace(/</g, '%3C')\n                                .replace(/>/g, '%3E')\n                                .replace(/&/g, '%26')\n                                .replace(/#/g, '%23')\n                                .replace(/\\s+/g, ' ');\n                            var encodedData = ',' + newText;\n                            if (encodedData.length < DATA.length) {\n                                DATA = encodedData;\n                            }\n                        }\n                        return '\"data:' + MIME + DATA + '\"';\n                    }\n                }\n                var absoluteUrl = Utilities.joinPaths(Utilities.pathOf(originalFile), url);\n                return Utilities.relativePath(newFile, absoluteUrl);\n            });\n        };\n        return Utilities;\n    }());\n    CSSLoaderPlugin.Utilities = Utilities;\n    (function () {\n        var cssLoader = null;\n        var isElectron = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions['electron'] !== 'undefined');\n        if (typeof process !== 'undefined' && process.versions && !!process.versions.node && !isElectron) {\n            cssLoader = new NodeCSSLoader();\n        }\n        else if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('MSIE 9') >= 0) {\n            cssLoader = new IE9CSSLoader();\n        }\n        else if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('MSIE 8') >= 0) {\n            cssLoader = new IE8CSSLoader();\n        }\n        else {\n            cssLoader = new BrowserCSSLoader();\n        }\n        define('vs/css', new CSSPlugin(cssLoader));\n    })();\n})(CSSLoaderPlugin || (CSSLoaderPlugin = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar _nlsPluginGlobal = this;\nvar NLSLoaderPlugin;\n(function (NLSLoaderPlugin) {\n    var global = _nlsPluginGlobal || {};\n    var Resources = global.Plugin && global.Plugin.Resources ? global.Plugin.Resources : undefined;\n    var DEFAULT_TAG = 'i-default';\n    var IS_PSEUDO = (global && global.document && global.document.location && global.document.location.hash.indexOf('pseudo=true') >= 0);\n    var slice = Array.prototype.slice;\n    function _format(message, args) {\n        var result;\n        if (args.length === 0) {\n            result = message;\n        }\n        else {\n            result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n                var index = rest[0];\n                return typeof args[index] !== 'undefined' ? args[index] : match;\n            });\n        }\n        if (IS_PSEUDO) {\n            // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n            result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n        }\n        return result;\n    }\n    function findLanguageForModule(config, name) {\n        var result = config[name];\n        if (result)\n            return result;\n        result = config['*'];\n        if (result)\n            return result;\n        return null;\n    }\n    function localize(data, message) {\n        var args = [];\n        for (var _i = 0; _i < (arguments.length - 2); _i++) {\n            args[_i] = arguments[_i + 2];\n        }\n        return _format(message, args);\n    }\n    function createScopedLocalize(scope) {\n        return function (idx, defaultValue) {\n            var restArgs = slice.call(arguments, 2);\n            return _format(scope[idx], restArgs);\n        };\n    }\n    var NLSPlugin = (function () {\n        function NLSPlugin() {\n            this.localize = localize;\n        }\n        NLSPlugin.prototype.setPseudoTranslation = function (value) {\n            IS_PSEUDO = value;\n        };\n        NLSPlugin.prototype.create = function (key, data) {\n            return {\n                localize: createScopedLocalize(data[key])\n            };\n        };\n        NLSPlugin.prototype.load = function (name, req, load, config) {\n            config = config || {};\n            if (!name || name.length === 0) {\n                load({\n                    localize: localize\n                });\n            }\n            else {\n                var suffix = void 0;\n                if (Resources && Resources.getString) {\n                    suffix = '.nls.keys';\n                    req([name + suffix], function (keyMap) {\n                        load({\n                            localize: function (moduleKey, index) {\n                                if (!keyMap[moduleKey])\n                                    return 'NLS error: unknown key ' + moduleKey;\n                                var mk = keyMap[moduleKey].keys;\n                                if (index >= mk.length)\n                                    return 'NLS error unknow index ' + index;\n                                var subKey = mk[index];\n                                var args = [];\n                                args[0] = moduleKey + '_' + subKey;\n                                for (var _i = 0; _i < (arguments.length - 2); _i++) {\n                                    args[_i + 1] = arguments[_i + 2];\n                                }\n                                return Resources.getString.apply(Resources, args);\n                            }\n                        });\n                    });\n                }\n                else {\n                    if (config.isBuild) {\n                        req([name + '.nls', name + '.nls.keys'], function (messages, keys) {\n                            NLSPlugin.BUILD_MAP[name] = messages;\n                            NLSPlugin.BUILD_MAP_KEYS[name] = keys;\n                            load(messages);\n                        });\n                    }\n                    else {\n                        var pluginConfig = config['vs/nls'] || {};\n                        var language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\n                        suffix = '.nls';\n                        if (language !== null && language !== DEFAULT_TAG) {\n                            suffix = suffix + '.' + language;\n                        }\n                        req([name + suffix], function (messages) {\n                            if (Array.isArray(messages)) {\n                                messages.localize = createScopedLocalize(messages);\n                            }\n                            else {\n                                messages.localize = createScopedLocalize(messages[name]);\n                            }\n                            load(messages);\n                        });\n                    }\n                }\n            }\n        };\n        NLSPlugin.prototype._getEntryPointsMap = function () {\n            global.nlsPluginEntryPoints = global.nlsPluginEntryPoints || {};\n            return global.nlsPluginEntryPoints;\n        };\n        NLSPlugin.prototype.write = function (pluginName, moduleName, write) {\n            // getEntryPoint is a Monaco extension to r.js\n            var entryPoint = write.getEntryPoint();\n            // r.js destroys the context of this plugin between calling 'write' and 'writeFile'\n            // so the only option at this point is to leak the data to a global\n            var entryPointsMap = this._getEntryPointsMap();\n            entryPointsMap[entryPoint] = entryPointsMap[entryPoint] || [];\n            entryPointsMap[entryPoint].push(moduleName);\n            if (moduleName !== entryPoint) {\n                write.asModule(pluginName + '!' + moduleName, 'define([\\'vs/nls\\', \\'vs/nls!' + entryPoint + '\\'], function(nls, data) { return nls.create(\"' + moduleName + '\", data); });');\n            }\n        };\n        NLSPlugin.prototype.writeFile = function (pluginName, moduleName, req, write, config) {\n            var entryPointsMap = this._getEntryPointsMap();\n            if (entryPointsMap.hasOwnProperty(moduleName)) {\n                var fileName = req.toUrl(moduleName + '.nls.js');\n                var contents = [\n                    '/*---------------------------------------------------------',\n                    ' * Copyright (c) Microsoft Corporation. All rights reserved.',\n                    ' *--------------------------------------------------------*/'\n                ], entries = entryPointsMap[moduleName];\n                var data = {};\n                for (var i = 0; i < entries.length; i++) {\n                    data[entries[i]] = NLSPlugin.BUILD_MAP[entries[i]];\n                }\n                contents.push('define(\"' + moduleName + '.nls\", ' + JSON.stringify(data, null, '\\t') + ');');\n                write(fileName, contents.join('\\r\\n'));\n            }\n        };\n        NLSPlugin.prototype.finishBuild = function (write) {\n            write('nls.metadata.json', JSON.stringify({\n                keys: NLSPlugin.BUILD_MAP_KEYS,\n                messages: NLSPlugin.BUILD_MAP,\n                bundles: this._getEntryPointsMap()\n            }, null, '\\t'));\n        };\n        ;\n        NLSPlugin.BUILD_MAP = {};\n        NLSPlugin.BUILD_MAP_KEYS = {};\n        return NLSPlugin;\n    }());\n    NLSLoaderPlugin.NLSPlugin = NLSPlugin;\n    (function () {\n        define('vs/nls', new NLSPlugin());\n    })();\n})(NLSLoaderPlugin || (NLSLoaderPlugin = {}));\n"]}